// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array freeList;
    static Array heap;
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = null;
        let heap[1] = 16383 - 2048;
        let freeList = heap;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        var int value;
        let value = ram[address];
        return value;
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block;
        var int listsize;
        var Array newArray;
        let freeList = heap;
        if (size < (freeList[1] + 1)){
            let block = freeList + 4; //carving out block
            let freeList[0] = freeList + 4 + size;
            let newArray = freeList[0];
            let newArray[0] = null;
            let newArray[1] = freeList[1] - size - 2;
            let freeList[1] = 0;
            let block[-1] = size + 2;
            let block[-2] = null;
            return block;
        }
        else{
            let freeList = freeList[0];
            let listsize = freeList[1];
            while ( (~(size < (listsize + 1) ) ) & (~(freeList[0] = null))){
                let freeList = freeList[0];
                let listsize = freeList[1];
            }
            if (size < (listsize + 1)){
                let block = freeList + 4; //carving out block
                let freeList[0] = freeList + 4 + size;
                let newArray = freeList[0];
                let newArray[0] = null;
                let newArray[1] = freeList[1] - size - 2;
                let freeList[1] = 0;
                let block[-1] = size + 2;
                let block[-2] = null;
                return block;
            }
            else{
                return 0; // should attempt defragmentation here
            }
            
        }

    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let freeList = heap;
        while (~(freeList[0] = null)){
            let freeList = freeList[0];
        }
        let freeList[0] = o - 2;
        let o[-2] = null;
        let o[-1] = o[-1] - 2;
        return;
    }    
}
