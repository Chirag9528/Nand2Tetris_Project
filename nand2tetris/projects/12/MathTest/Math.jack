// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
		let twoToThe[0] = 1;
		let twoToThe[1] = 2;
		let twoToThe[2] = 4;
		let twoToThe[3] = 8;
		let twoToThe[4] = 16;
		let twoToThe[5] = 32;
		let twoToThe[6] = 64;
		let twoToThe[7] = 128;
		let twoToThe[8] = 256;
		let twoToThe[9] = 512;
		let twoToThe[10] = 1024;
		let twoToThe[11] = 2048;
		let twoToThe[12] = 4096;
		let twoToThe[13] = 8192;
		let twoToThe[14] = 16384;
		let twoToThe[15] = 16384 + 16384; // cannot represent 32768 as a single value as it is too large
		return;
    }

    function boolean bit(int x , int j){
        if ((x & twoToThe[j]) = 0 ){
            return false;
        }
        else{
            return true;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x > 0){
            return x;
        }
        else{
            let x = - x;
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum , shiftedx , i;
        var boolean bitvalue;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while ( i < 16){
            let bitvalue = Math.bit( y , i);
            if (bitvalue = (-1)){
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;
            let i = i + 1;
        }
        return sum;
        
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var int nx , ny;
        let nx = x < 0;
        let ny = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);
        if ( y > x){
            return 0;
        }
        let q = Math.divide(x , (y + y) );
        if ((x - ( (q + q) * y)) < y ){
            if (nx = ny){
                return (q + q);
            }
            else{
                return -(q + q);
            }
        }
        else{
            if (nx = ny){
                return ((q + q) + 1);
            }
            else{
                return -((q + q) + 1);
            }
        }

    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y , j , c , d;
        let y = 0;
        let j = 7;
        while ( j > -1){
            let c = y + twoToThe[j];
            let d = c * c;
            if (((d < x) | (d = x)) & (d > 0)){
                let y = c;
            }
            let j = j -1;
        }
        return y;

    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        else{
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        else{
            return b;
        }
    }
}
